Origin:
JavaScript was created by Brendan Eich in 1995 at Netscape. 
Built in 10 days to make web pages interactive.
 Originally called Mocha, then LiveScript, and finally JavaScript.

Standards — ECMAScript (ES):
JavaScript follows the ECMAScript standard maintained by ECMA International (TC39 committee).
 ECMAScript is the blueprint, JavaScript is the implementation.

ES3 (1999) – baseline for old browsers.

ES5 (2009) – strict mode, JSON, better array methods.

ES6 / ES2015 – let, const, arrow functions, classes, promises, template literals, destructuring.

Post-ES6 – yearly updates, adding async/await, optional chaining, etc.

MDN Web Docs:
Primary reference for syntax, APIs, and browser compatibility. Read the spec on MDN when in doubt.
https://developer.mozilla.org/

Why not var:

Scope: var is function-scoped; let and const are block-scoped.

Hoisting quirks: var gets hoisted and initialized with undefined — can cause silent bugs.

Redeclaration: Same variable can be redeclared without error.

Modern practice: Use const by default, let when reassignment is required.

Core concepts to master:

Execution Context & Call Stack

Hoisting & Scope Chain

Closures (functions with preserved scope)

Prototype & Inheritance Model

this binding rules

Event Loop & Async Execution (microtasks/macrotasks)

DOM APIs & Events

ES Modules vs CommonJS

Memory Management (garbage collection, leaks)

Language internals: Type coercion, equality (== vs ===), truthy/falsy values

Mental model:

JS is single-threaded but asynchronous via an event loop.

All objects inherit from Object.prototype unless you break the chain.

Functions are first-class — can be passed, returned, stored.

Rule:
Read ECMAScript spec for the why, MDN for the how. Build, break, debug.